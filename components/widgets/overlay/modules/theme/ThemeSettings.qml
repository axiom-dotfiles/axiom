pragma ComponentBehavior: Bound
import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.config
import qs.services
import qs.components.reusable
import qs.components.widgets.common
import qs.components.widgets.overlay.modules.settings

Rectangle {
  id: root
  color: Theme.background
  anchors.fill: parent
  border.color: Theme.border
  border.width: Menu.cardBorderWidth
  radius: Menu.cardBorderRadius

  property var localConfig: SettingsMenu.localConfig
  property bool isDirty: SettingsMenu.isDirty
  property bool isStaged: SettingsMenu.isStaged

  ColumnLayout {
    anchors.fill: parent
    anchors.margins: Widget.padding
    spacing: 0

    SettingsHeader {
      title: "Theme"
    }

    Rectangle {
      Layout.fillWidth: true
      Layout.preferredHeight: 1
      Layout.topMargin: Widget.spacing / 2
      Layout.bottomMargin: Widget.spacing / 2
      color: Theme.border
      opacity: 0.3
    }

    ScrollView {
      Layout.fillWidth: true
      Layout.fillHeight: true
      clip: true
      ScrollBar.horizontal.policy: ScrollBar.AlwaysOff

      ColumnLayout {
        width: parent.parent.width - Widget.padding * 2
        spacing: Widget.spacing * 2

        Item {
          Layout.preferredHeight: Widget.spacing
        }

        // TODO: Control whether or not pywal is used with below toggle, and have the user select a backend.
        // SchemaSwitch {
        //   label: "Enable Generated Theme"
        //   description: "Automatically apply themes generated by pywal."
        //   checked: root.localConfig.Appearance?.enableGeneratedTheme || false
        //   onToggled: value => {
        //     if (value === checked) return;
        //     if (!root.localConfig.Appearance)
        //       root.localConfig.Appearance = {};
        //     root.localConfig.Appearance.enableGeneratedTheme = value;
        //     SettingsMenu.markDirty();
        //     SettingsMenu.continueStaging();
        //   }
        // }

        SchemaSection {
          title: "Generated Themes"
          expanded: false
          Layout.leftMargin: Widget.padding
          Layout.rightMargin: Widget.padding
          id: pywalThemes

          ListView {
            id: generatedThemeListView
            Layout.fillWidth: true
            Layout.preferredHeight: contentHeight
            model: ThemeManager.generatedThemes
            spacing: Widget.spacing / 2
            delegate: StyledTextButton {
              required property var modelData
              visible: modelData.name.includes("dark")
              height: visible ? implicitHeight : 0
              width: parent.width
              text: modelData.name.replace("dark-", "").replace("light-", "")
              backgroundColor: Appearance.theme === modelData.name ? Theme.accent : Theme.backgroundHighlight
              textHoverColor: Appearance.theme === modelData.name ? Theme.foreground : Theme.background
              
              onClicked: ThemeManager.applyTheme(modelData.name, true)
            }
          }
        }

        // SchemaObjectArray {
        //   label: "Pywal Backend"
        //   property var backendOptions: ["colorthief", "wal", "colorz", "pywal"]
        //   label: "Pywal Backend"
        //   items: backendOptions
        // }

        SchemaSwitch {
          label: "Enable Light Mode"
          description: "Toggle light mode for supported themes."
          checked: !Appearance.darkMode || false
          onToggled: value => {
            ThemeManager.toggleDarkMode();
          }
        }

        
        SchemaSection {
          title: "User Themes"
          Layout.leftMargin: Widget.padding
          Layout.rightMargin: Widget.padding
          id: userThemes
        }

        SchemaSection {
          title: "Default Themes"
          Layout.leftMargin: Widget.padding
          Layout.rightMargin: Widget.padding
          id: defaultThemes

          ListView {
            id: defaultThemeListView
            Layout.fillWidth: true
            Layout.preferredHeight: contentHeight
            model: ThemeManager.defaultThemes
            spacing: Widget.spacing / 2
            delegate: StyledTextButton {
              required property var modelData
              width: parent.width
              text: modelData.name
              backgroundColor: Appearance.theme === modelData.name ? Theme.accent : Theme.backgroundHighlight
              textHoverColor: Appearance.theme === modelData.name ? Theme.foreground : Theme.background
              
              onClicked: ThemeManager.applyTheme(modelData.name, false)
            }
          }
        }
      }
    }
  }
}
